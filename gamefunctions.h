#pragma once
#include "vec.h"
#include "sdk.h"
#include "spoofcall.h"
#include "offsets.h"






/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'game_dx12_ship.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

/* 17974 */


/* 56260 */
struct UICharacterPoseState
{
	vec3_t offset;
	vec3_t rotation;
};

/* 56261 */
struct UICharacterAnimItem
{
	char animName[64];
	char startNoteName[64];
	float blendTime;
	float startTime;
};

/* 56262 */
struct UICharacterAnimState
{
	unsigned int animQueueStart;
	unsigned int animQueueEnd;
	unsigned int currentQueueIndex;
	UICharacterAnimItem animQueue[8];
	UICharacterAnimItem facialAnim;
};

/* 56263 */
struct __declspec(align(2)) UICharacterModelState
{
	char bodyPartModels[8][64];
	unsigned int bodyPartModelCount;
	char heldWeapon[1024];
	char stowedWeapon[1024];
	char accessoryWeapon[1024];
	bool useAkimbo;
	bool isHeldWeaponHidden;
	bool isHidden;
};

/* 56264 */
struct UICharacterState
{
	__int16 entityNum;
	UICharacterPoseState poseState;
	UICharacterAnimState animState;
	UICharacterModelState modelState;
};

enum LocalClientNum_t 
{
  LOCAL_CLIENT_INVALID = 0xFFFFFFFF,
  LOCAL_CLIENT_0 = 0x0,
  LOCAL_CLIENT_1 = 0x1,
  LOCAL_CLIENT_LAST = 0x1,
  LOCAL_CLIENT_COUNT = 0x2,
};

enum entityType_s : __int16
{
	ET_FIRST = 0x0,
	ET_GENERAL = 0x0,
	ET_PLAYER = 0x1,
	ET_PLAYER_CORPSE = 0x2,
	ET_ITEM = 0x3,
	ET_MISSILE = 0x4,
	ET_INVISIBLE = 0x5,
	ET_SCRIPTMOVER = 0x6,
	ET_SOUND = 0x7,
	ET_FX = 0x8,
	ET_LOOP_FX = 0x9,
	ET_PRIMARY_LIGHT = 0xA,
	ET_TURRET = 0xB,
	ET_HELICOPTER = 0xC,
	ET_PLANE = 0xD,
	ET_VEHICLE = 0xE,
	ET_VEHICLE_CORPSE = 0xF,
	ET_VEHICLE_SPAWNER = 0x10,
	ET_AGENT = 0x11,
	ET_AGENT_CORPSE = 0x12,
	ET_ACTOR = 0x13,
	ET_ACTOR_SPAWNER = 0x14,
	ET_ACTOR_CORPSE = 0x15,
	ET_PHYSICS_CHILD = 0x16,
	ET_BEAM = 0x17,
	ET_CLIENT_CHARACTER = 0x18,
	ET_RAGDOLL_CONSTRAINT = 0x19,
	ET_PHYSICS_VOLUME = 0x1A,
	ET_COVERWALL = 0x1B,
	ET_INFO_VOLUME_GRAPPLE = 0x1C,
	ET_EVENTS = 0x1D,
	ET_COUNT = 0x1E,
	ET_MAX = 0x100,
};



struct LerpEntityState
{
	
};

struct StaticEntityStateGeneral
{
	unsigned int xmodel;
};

/* 18116 */
struct BgWeaponHandle
{
	unsigned int m_mapEntryId;
};

/* 23267 */
struct StaticEntityStatePlayer
{
	BgWeaponHandle offhandWeaponHandle;
	BgWeaponHandle stowedWeaponHandle;
};

/* 23268 */
struct StaticEntityStateVehiclePlayer
{
	unsigned __int8 playerIndex;
	unsigned __int8 teamId;
	unsigned __int8 pad[2];
};

/* 23269 */
struct StaticEntityStateTurret
{
	unsigned int xmodel;
	unsigned int carrierEntNum;
};

/* 23270 */

/* 23271 */
union StaticEntityStateMover
{
	unsigned int scriptableIndex;
	unsigned int reflectionProbeIndex;
	int clientNum;
	unsigned int weaponIndex;
	unsigned int headModelIndex;
};

/* 23272 */


/* 23273 */
struct StaticEntityStatePhysicsVolume
{
	int shapeID;
};

/* 23274 */
struct StaticEntityStatePrimaryLight
{
	unsigned int offset;
};

/* 23275 */
struct StaticEntityStatePlane
{
	unsigned int xmodel;
};

/* 23276 */
struct StaticEntityStateCoverWall
{
	unsigned int xmodel;
};

/* 23277 */
struct StaticEntityStateMissile
{
	unsigned int attackerEnt;
};

/* 23278 */
struct StaticEntityStateAgentCorpse
{
	BgWeaponHandle stowedWeaponHandle;
};

/* 23279 */
struct StaticEntityStateFX
{
	unsigned int index;
	int killEffectDef;
};

/* 23280 */
struct StaticEntityStateAnonymous
{
	int data[2];
};


union StaticEntityStateTypeUnion
{
	StaticEntityStateGeneral general;
	StaticEntityStatePlayer player;
	StaticEntityStateVehiclePlayer vehiclePlayer;
	StaticEntityStateTurret turret;
	StaticEntityStateMover mover;
	StaticEntityStatePhysicsVolume physicsVolume;
	StaticEntityStatePrimaryLight primaryLight;
	StaticEntityStatePlane plane;
	StaticEntityStateCoverWall coverwall;
	StaticEntityStateMissile missile;
	StaticEntityStateAgentCorpse agentCorpse;
	StaticEntityStateFX fx;
	StaticEntityStateAnonymous anonymous;
};





struct $D69577AC11C1636F320D0973E2FBC7CA
{
	unsigned __int32 hudOutlineInfo : 6;
	unsigned __int32 isObjective : 1;
	unsigned __int32 teamId : 2;
	unsigned __int32 padding : 23;
};

/* 21561 */
union HudData
{
	$D69577AC11C1636F320D0973E2FBC7CA __s0;
	unsigned int data;
};

class playerState_t
{
public:
    char pad_0000[52]; //0x0000
    vec3_t vecOrigin; //0x0034
    char pad_0040[0x198]; //0x0040
    int clienNum; //0x1D8
    char pad_01DC[4]; //0x01DC
    vec3_t viewAngle; //0x01E0
    char pad_01EC[120]; //0x01EC
    int Health; //0x0264
    char pad_0268[164]; //0x0268
    bool radarEnabled; //0x030C
    bool radarBlocked; //0x030D
    bool radarShowEnemyDirection; //0x030E
    __int8 UAV; //0x030F
    char pad_0310[1152]; //0x0310
    int8_t crosshair; //0x0790
};


struct entityState_t
{
	__int16 number;
	__int16 otherEntityNum;
	__int16 attackerEntityNum;
	__int16 groundEntityNum;
	entityType_s eType;
	unsigned __int8 surfType;
	bool inAltWeaponMode;
	LerpEntityState lerp;
	StaticEntityStateTypeUnion staticState;
	BgWeaponHandle weaponHandle;
	int time2;
	int loopSound;
	int clientNum;
	HudData hudData;

};

struct DDLState {
	int isValid;
	int offset;
	int arrayIndex;
	int member;
};


struct DDLContext {
	char buff;
	int length;
	int def;
	int accessCB;
	int userdata;
	int obsfucation;
	int randomint;
};

struct __declspec(align(8)) DDLDef
{
	char* name;
	unsigned __int16 version;
	unsigned __int64 guidSeed;
	unsigned __int64 guid;
	int bitSize;
	int byteSize;
	void* structList;
	int structCount;
	char pad[0x8];
	int enumCount;
	DDLDef* next;
	int headerBitSize;
	int headerByteSize;
	bool paddingUsed;
	bool minimalHeader;
};
struct snapshot_t_vtbl;

 struct  snapshot_t
{
	snapshot_t_vtbl* __vftable /*VFT*/;
	int snapFlags;
	int serverTime;
};

 struct AnimLinkedToType
 {
	 ;
 };
 struct clientState_t
 {
	 int clientIndex;
	 __int32 team;
	 int modelindex;
	 bool dualWielding;
	 bool offhandShieldDeployed;
	 bool riotShieldEquipped;
	 bool hybridScopeState;
	 bool doNotSimulateTracers;
	 bool usingNVG;
	 bool isOnWall;
	 bool isScriptedSceneAnim;
	 bool isBot;
	 bool enableVehicleOccupancyAnimations;
	 int weaponShotCount[2];
	 bool isWeaponSmoking[2];
	 __int16 meleeChargeEnt;
	 int meleeAnimDataPacked;
	 AnimLinkedToType animLinkedToType;
	 int attachModelIndex[9];
	 int attachTagIndex[9];
	 unsigned int attachModelIsOnBack;
	 char name[36];
	 unsigned int nameSuffix;
	 int healthRatio;
	 __int16 rank;
	 __int16 prestige;
	/* bitarray<64> perks;
	 compressedAnimData_s compressedAnimData;
	 int mantleSpeedAnimCond;
	 bool isUsingWeaponAltMode;
	 int voiceConnectivityBits;
	 char clanAbbrev[9];
	 unsigned __int8 clanTagType;
	 bool isMLGSpectator;
	 bool isMLGFollower;
	 int indexMLGFollower;
	 char bountyCount;
	 ClientCustomizationInfo customization;
	 MountWorldmodelAbbreviatedProperties mount;
	 float heightOffset;
	 bool isOnStairs;
	 bool isNearEnvironmentCollision;
	 unsigned int perkIconName;
	 int squadIndex;
	 int suitIndex;
	 DoorClientState doorState[2];
	 int game_extrainfo;
	 CharacterChargedWeaponInfo chargedWeaponInfo;
	 FootstepActionType_t footstepActionType;
	 FootstepMoveType_t footstepMoveType;
	 bool canEmitFootsteps;
	 unsigned int clothType;
	 int playerASM_scripted_anim_start_time;
	 unsigned int execution;
	 ExecutionVictimStance executionStance;
	 int executionStartTime;
	 int vehicleAnimStateSeat;
	 unsigned int carryObjectIndex;
	 unsigned int carryObjectFlags;
	 unsigned __int8 skydiveAnimState;
	 int movingPlatform;
	 BgWeaponHandle serverDobjHeldWeapon;
	 BgWeaponHandle serverDobjTurretWeapon;
	 bool serverDobjHideWeapon;
	 bool serverDobjStowHeldWeapon;
	 bool lastStandReviving;
	 bool lastStandSelfReviving;*/
 };

 struct __declspec(align(4)) agentState_s
 {
	 __int16 entityNum;
	 __int16 meleeChargeEnt;
	 int meleeAnimDataPacked;
	 __int32 team;
	 int modelindex;
	 int dualWielding;
	 bool offhandShieldDeployed;
	 bool isUsingWeaponAltMode;
	 bool hybridScopeState;
	 int weaponShotCount[2];
	 bool isWeaponSmoking[2];
	 bool isOnWall;
	 bool isScriptedSceneAnim;
	 bool enableVehicleOccupancyAnimations;
	 bool usingNVG;
	 bool doNotSimulateTracers;
	 /*AnimLinkedToType animLinkedToType;
	 int suitIndex;
	 int attachModelIndex[9];
	 int attachTagIndex[9];
	 bitarray<64> perks;
	 compressedAnimData_s compressedAnimData;
	 int mantleSpeedAnimCond;
	 unsigned int name;
	 unsigned __int8 desiredSpeed;
	 unsigned __int8 strafeBlendYaw;
	 unsigned __int8 crouchBlendRatio;
	 unsigned __int8 groundPlaneSlope;
	 unsigned __int8 gunAdditiveIndex;
	 unsigned __int8 aimYaw;
	 unsigned __int8 aimPitch;
	 bool aimActive;
	 unsigned __int8 leanYaw;
	 unsigned __int8 lookAtState;
	 unsigned __int8 lookAtPitch;
	 unsigned __int8 lookAtYaw;
	 unsigned __int8 aimState;
	 unsigned __int8 whizbyIndex;
	 unsigned __int8 gestureIndex;
	 unsigned __int8 facialIndex;
	 unsigned __int8 doorSpeedIndex;
	 unsigned __int8 doorIndex;
	 unsigned __int8 strafeForwardIndex;
	 unsigned __int8 yawDelta;
	 unsigned __int8 civilianFocus;
	 unsigned __int8 shootStyleIndex;
	 unsigned __int8 numShots;
	 unsigned __int16 groundTurretEntNum;
	 CharacterChargedWeaponInfo chargedWeaponInfo;
	 FootstepActionType_t footstepActionType;
	 FootstepMoveType_t footstepMoveType;
	 bool canEmitFootsteps;
	 unsigned int clothType;
	 int playerASM_scripted_anim_start_time;
	 unsigned int execution;
	 ExecutionVictimStance executionStance;
	 int executionStartTime;
	 int vehicleAnimStateSeat;
	 unsigned int carryObjectIndex;
	 unsigned int carryObjectFlags;
	 bool isOnStairs;
	 unsigned __int8 skydiveAnimState;
	 BgWeaponHandle serverDobjHeldWeapon;
	 BgWeaponHandle serverDobjTurretWeapon;
	 bool serverDobjHideWeapon;
	 bool serverDobjStowHeldWeapon;*/
 };

 struct Weapon_t
 {
	 unsigned __int16 weaponIdx;
	 unsigned __int16 stickerIndices[4];
	 unsigned __int16 weaponClientLoadout;
	 unsigned __int16 weaponOthers;
	 unsigned __int8 weaponAttachments[13];
	 unsigned __int8 attachmentVariationIndices[29];
	 unsigned __int8 weaponCamo;
	 unsigned __int8 weaponLootId;
	 unsigned __int8 scopeVariation;
	 unsigned __int8 visualAttachmentHighAddr;
 };

 struct WeaponMapEntry
 {
	 unsigned __int16 index;
	 Weapon_t weapon;
 };

 struct ScoreInfo
 {
	 unsigned __int16 ping;
	 unsigned __int8 status;
	 unsigned __int16 score;
	 unsigned __int16 kills;
	 unsigned __int16 deaths;
	 unsigned __int16 assists;
	 unsigned __int16 extrascore0;
	 unsigned __int16 extrascore1;
	 unsigned __int16 extrascore2;
	 unsigned __int16 extrascore3;
	 unsigned __int16 skill;
	 unsigned __int16 adrenaline;
	 unsigned __int16 deathTimerLength;
 };




 struct ScoreboardInfo
 {
	 int teamScores[2];
	 int teamPlacement[203];
	 ScoreInfo clientScores[200];
 };

struct   CgSnapshotMP : snapshot_t
{
	/*int serverCommandSequence;
	int ping;
	int numEntities;
	int numClients;
	int numAgents;
	int numWeapons;*/
	char pad[0x2c];
	playerState_t ps;
	//entityState_t entities[2048];
	//clientState_t clients[200];
	//agentState_s agents[48];
	//WeaponMapEntry weapons[1023];
	//unsigned __int64 scriptableChangeStartSequence;
	//unsigned __int64 scriptableChangeEndSequence;
	//unsigned int scriptablePartsChecksum;
	//unsigned int scriptableInstanceChecksum;
	//ScoreboardInfo scores;
	//ComSnapshotStreamSync streamSync;
	//OmnvarData omnvars[500];
	//MLGSpectatorClientInfo mlgSpectatorClientInfo[200];

};

enum TraceHitType : __int32
{
	TRACE_HITTYPE_BEGIN = 0x0,
	TRACE_HITTYPE_NONE = 0x0,
	TRACE_HITTYPE_ENTITY = 0x1,
	TRACE_HITTYPE_DYNENT_MODEL = 0x2,
	TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
	TRACE_HITTYPE_GLASS = 0x4,
	TRACE_HITTYPE_SCRIPTABLE = 0x5,
	TRACE_HITTYPE_CLIENT_MODEL = 0x6,
	TRACE_HITTYPE_END = 0x6,
};

/* 1037 */
enum TraceHitSubType : __int32
{
	TRACE_HITSUBTYPE_NONE = 0x0,
	TRACE_HITSUBTYPE_COVERWALL = 0x1,
};

/* 962 */

/* 21856 */
struct TraceSubTypeData_CoverWall
{
	unsigned __int16 id;
};

/* 21857 */
union TraceHitSubTypeData
{
	TraceSubTypeData_CoverWall coverWall;
};

/* 21858 */
struct trace_t
{
	float fraction;
	vec3_t position;
	vec3_t normal;
	int surfaceFlags;
	int contents;
	TraceHitType hitType;
	TraceHitSubType hitSubType;
	unsigned int hitId;
	float fractionForHitType;
	unsigned __int16 modelIndex;
	const char* partName;
	unsigned __int16 partGroup;
	TraceHitSubTypeData subTypeData;
	bool allsolid;
	bool startsolid;
	bool walkable;
	bool getPenetration;
	bool removePitchAndRollRotations;
	float closestPointsPenetration;
	char surfaceIndex;
	const char* debugHitName;
};

struct Bounds
{
	vec3_t midPoint;
	vec3_t halfSize;
};


//struct /*VFT*/ snapshot_t_vtbl
//{
//	void(__fastcall * destructor_snapshot_t)(snapshot_t* this_ptr);
//	const playerState_t* (__fastcall* GetPlayerState_2)(snapshot_t* this_ptr, const int );
//	int(__fastcall* GetServerPing)(snapshot_t* this_ptr);
//};


class Rect_T
{
public:
	float lt_x, lt_y, rt_x, rt_y, rb_x, rb_y, lb_x, lb_y;

	Rect_T(float x, float y, float w, float h) {
		this->lt_x = x; this->lt_y = y; this->rt_x = x + w; this->rt_y = y; this->rb_x = x + w; this->rb_y = y + h; this->lb_x = x; this->lb_y = y + h;
	}
	float* toFloat();
	void getRect(float x, float y, float w, float h);
};


class Engine_Color
{
	float r, g, b, t;
public:
	Engine_Color(float _r, float _g, float _b, float _t) { this->r = _r; this->g = _g; this->b = _b; this->t = _t; }
	float* toFloat();
};


struct Material
{
	const char* name;
	unsigned int contents;
	unsigned int surfaceFlags;
	float maxDisplacement;
	//MaterialGeometryType materialType;
	//unsigned __int8 cameraRegion;
	//unsigned __int8 sortKey;
	//$49ECFF4638277A3511BA4CBB6D1719DF ___u7;
	//unsigned __int8 textureCount;
	//unsigned __int8 constantCount;
	//unsigned __int8 constantBufferCount;
	//unsigned __int8 layerCount;
	//unsigned __int16 packedAtlasDataSize;
	//unsigned __int8 textureAtlasRowCount;
	//unsigned __int8 textureAtlasColumnCount;
	//GfxDrawSurf drawSurf;
	//unsigned __int8* packedAtlasData;
	//MaterialTechniqueSet* techniqueSet;
	//MaterialTextureDef* textureTable;
	//MaterialConstantDef* constantTable;
	//GfxDecalVolumeMaterial* decalVolumeMaterial;
	//unsigned __int8* constantBufferIndex;
	//MaterialConstantBufferDef* constantBufferTable;
	//const char** subMaterials;
};



struct TTFDef;

/* 35038 */
struct GfxFont
{
	const char* fontName;
	int pixelHeight;
	int ttfCount;
	TTFDef* ttfDefs[4];
};

/* 20628 */
struct TTFDef
{
	const char* name;
	int fileLen;
	const char* file;
	void* ftFace;
};




inline GfxFont* regularFont;

inline Material* materialWhite{};
inline Engine_Color* redColor;
inline Rect_T* drawRect;
inline Engine_Color* whiteColor;
inline Engine_Color* orangeColor;
inline Engine_Color* blackColor;
inline Engine_Color* greenColor;
inline Engine_Color* nameColor;
inline Engine_Color* radarbgColor;


typedef void(__fastcall*R_AddCmdDrawText_2t)(char* text, int maxChars, GfxFont* font, uint64_t fontstyle, int fontsize, float x, float y, float x_resize, float y_resize, float scale, float rotation, float* color, uint64_t unk1, bool unk2, uint64_t unk3, bool unk4, uint64_t unk5);
typedef void(__fastcall* CL_DrawTextPhysical)(const char* text, int maxChars, GfxFont* font, float x, float y, float xScale, float yScale, Engine_Color* color, int style);
inline R_AddCmdDrawText_2t fnR_AddCmdDrawText2;
typedef void(__fastcall* R_AddCmdDrawStretchPic_t)(float x, float y, float w, float h, float s0, float t0, float s1, float t1, Engine_Color* color, Material* material);// draw line
typedef void(__fastcall* R_AddCmdDrawStretchPicRotateXY_t)(float x, float y, float w, float h, float a5, float a6, float a7, float a8, float angle, bool a10, bool a11, float* color, Material* material);
typedef uintptr_t(__stdcall* GetClActiveClient_t)();
typedef bool(__fastcall* CgMissile_IsEntityClient)(void* CgMissile, int entNum); //INDEX 19 : 
typedef void* (__fastcall* CgHandler_GetEntityOrigin)(void* CgHandler, int entIndex, vec3_t* outPosition);
typedef __int64(__fastcall* CgVehicleSystem_GetTeam)(void* CgVehicleSystem, entityState_t* es); //INDEX[11] 
typedef entityState_t* (__fastcall* CgMissile_GetEntityState)(void* CgMissile, const int entNum);
typedef playerState_t* (__fastcall* CgMissile_PlayerState)(void* CgMissile, const int entNum);
typedef bool(__fastcall* GetWorldBonePos)(uint64_t, int, int, float*);
typedef void(__fastcall* CG_VehicleCam_SetClientViewAngles_t)(uintptr_t clientinfo, vec3_t* viewAngles);
typedef snapshot_t* (__fastcall* CG_GetNextSnap_tt)(int LocalClientNum);
typedef uint64_t(__fastcall* t_get_entity_pos)(int, int, float*, vec3_t* position);

namespace GameFunctions
{
	extern bool G_Main_LocationalTrace( vec3_t start, vec3_t end,int entnum);
	extern void G_Main_TraceCapsule(trace_t* results, vec3_t* begin, vec3_t* end, Bounds* bound, int skipEntity, int contentmask);
	extern bool  AIPhys_Trace( const vec3_t start, const vec3_t end,int entnum);
	void  CG_PIP_EnableNightVision(int pipClient, double fadeInTime);
	extern bool WorldToScreenPosReal(vec3_t* pos, vec2_t* out);
	extern uintptr_t GetClientInfo();
	extern 	uintptr_t GetCharacterinfo(int entnum);
	extern UICharacterState*  CL_UICharacter_GetState(unsigned int clientIndex);
	extern 	uintptr_t GetClActiveClient();
	extern 	vec3_t  GetOriginForClosestCharacters(int entNum);
	extern void GetEntityTeam( DWORD* teamOut, unsigned int entityNum);
	extern bool get_bone_by_id(int i, int bone_id, vec3_t* Out_bone_pos);
	extern void set_viewangle(vec3_t* pos);
	extern entityState_t* GetEntityState(int entNum);

	extern const char* UI_SafeTranslateString(const char* reference);
	extern const char* SL_ConvertToString(uintptr_t reference);
		

	extern	playerState_t* GetPlayerState( int entNum);
	extern snapshot_t* CG_SnapshotMP_GetNextSnap( );
	extern  uintptr_t  Com_DDL_LoadAsset(const char* fileName);
	extern uintptr_t  DDL_GetRootState(uintptr_t result, uintptr_t ddlDef);
	extern bool  CL_PlayerData_GetDDLBuffer(uintptr_t context, int controllerindex, int stats_source, unsigned int statsgroup);
	extern bool  DDL_MoveToName(uintptr_t fromState, uintptr_t toState, const char* name);
	extern bool  DDL_SetInt(uintptr_t state, uintptr_t ddlContext, int val);
}

